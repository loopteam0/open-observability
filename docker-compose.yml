version: '3.8'

networks:
  observability-net:
    driver: bridge

volumes:
  prometheus_data: {}
  grafana_data: {}
  loki_data: {}
  sentry_data: {}
  sentry_postgres_data: {}
  sentry_redis_data: {}

services:
  # --------------------------------------------------------------------
  # OpenTelemetry Collector - Receives data and exports to backends
  # --------------------------------------------------------------------
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest # Use contrib for more exporters/receivers
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel-collector/otel-collector-config.yml:/etc/otel-collector-config.yml:ro
    ports:
      - "4317:4317"        # OTLP gRPC receiver
      - "4318:4318"        # OTLP HTTP receiver
      - "13133:13133"      # Health Check extension
      - "55679:55679"      # zPages extension
      - "8888:8888"        # Prometheus exporter for its own metrics
      - "8889:8889"        # Prometheus exporter for app metrics (if configured)
    networks:
      - observability-net
    depends_on:
      - jaeger
      - loki
      - prometheus

  # --------------------------------------------------------------------
  # Prometheus - Metrics Storage & Alerting
  # --------------------------------------------------------------------
  prometheus:
    image: prom/prometheus:v2.51.2
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle' # Allows hot reloads via HTTP POST to /-/reload
    ports:
      - "9090:9090"
    networks:
      - observability-net
    restart: unless-stopped

  # --------------------------------------------------------------------
  # Loki - Log Aggregation
  # --------------------------------------------------------------------
  loki:
    image: grafana/loki:2.9.8
    container_name: loki
    volumes:
      - ./loki/loki-config.yml:/etc/loki/config.yml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/config.yml
    ports:
      - "3100:3100" # Loki API port
    networks:
      - observability-net
    restart: unless-stopped

  # --------------------------------------------------------------------
  # Jaeger - Distributed Tracing (All-in-one for simplicity)
  # --------------------------------------------------------------------
  jaeger:
    image: jaegertracing/all-in-one:1.57
    container_name: jaeger
    ports:
      - "5775:5775/udp"    # Agent - zipkin.thrift
      - "6831:6831/udp"    # Agent - jaeger.thrift compact
      - "6832:6832/udp"    # Agent - jaeger.thrift binary
      - "5778:5778"        # Agent - config server
      - "16686:16686"      # Jaeger UI / Query Port
      - "14268:14268"      # Collector - jaeger.thrift HTTP
      - "14250:14250"      # Collector - jaeger.thrift gRPC (if using gRPC exporter)
      # - "9411:9411"      # Collector - Zipkin compatible
    environment:
      - COLLECTOR_OTLP_ENABLED=true # Enable OTLP receiver in Jaeger
    networks:
      - observability-net
    restart: unless-stopped

  # --------------------------------------------------------------------
  # Grafana - Visualization
  # --------------------------------------------------------------------
  grafana:
    image: grafana/grafana:10.4.2
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin # Change this in production!
      - GF_USERS_ALLOW_SIGN_UP=false
      # - GF_LOG_LEVEL=debug # Uncomment for more logs
    ports:
      - "3000:3000"
    networks:
      - observability-net
    restart: unless-stopped
    depends_on:
      - prometheus
      - loki
      - jaeger

  # --------------------------------------------------------------------
  # Sentry - Error Reporting (Simplified setup)
  # For production, refer to https://github.com/getsentry/self-hosted
  # --------------------------------------------------------------------
  sentry-redis:
    image: redis:7.2-alpine
    container_name: sentry-redis
    volumes:
      - sentry_redis_data:/data
    networks:
      - observability-net
    restart: unless-stopped

  sentry-postgres:
    image: postgres:16.2
    container_name: sentry-postgres
    volumes:
      - sentry_postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=sentry
      - POSTGRES_PASSWORD=sentrysecret # Change this in production!
      - POSTGRES_DB=sentry
    networks:
      - observability-net
    restart: unless-stopped

  sentry-base: &sentry-base # Base service for Sentry components
    image: getsentry/sentry:24.5.0 # Check for latest onpremise version
    networks:
      - observability-net
    depends_on:
      - sentry-redis
      - sentry-postgres
    environment:
      SENTRY_SECRET_KEY: 'generate_a_strong_secret_key_here_please_and_replace_me' # IMPORTANT: Generate a real secret key
      SENTRY_POSTGRES_HOST: sentry-postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_NAME: sentry
      SENTRY_DB_PASSWORD: sentrysecret # Must match POSTGRES_PASSWORD
      SENTRY_REDIS_HOST: sentry-redis
      SENTRY_REDIS_PORT: '6379'
      SENTRY_EMAIL_HOST: 'localhost' # Configure your actual email server
      SENTRY_EMAIL_PORT: '25'
      SENTRY_EMAIL_USE_TLS: 'false'
      SENTRY_SERVER_EMAIL: 'sentry@localhost'
      SENTRY_URL_PREFIX: 'http://localhost:9000' # Adjust if you expose Sentry differently
    volumes:
      - sentry_data:/var/lib/sentry/files # For file storage if not using external like S3

  sentry-web:
    <<: *sentry-base # YAML anchor to inherit from sentry-base
    container_name: sentry-web
    ports:
      - "9000:9000" # Sentry UI port
    command: run web
    restart: unless-stopped

  sentry-worker:
    <<: *sentry-base
    container_name: sentry-worker
    command: run worker
    restart: unless-stopped

  sentry-cron:
    <<: *sentry-base
    container_name: sentry-cron
    command: run cron
    restart: unless-stopped

# After starting for the first time, you'll need to run database migrations for Sentry:
# docker-compose exec sentry-web sentry upgrade --noinput
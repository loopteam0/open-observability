version: '3.8'

networks:
  observability-net:
    driver: bridge

volumes:
  prometheus_data: {}
  grafana_data: {}
  loki_data: {}

services:
  # --------------------------------------------------------------------
  # OpenTelemetry Collector - Receives data and exports to backends
  # --------------------------------------------------------------------
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest # Use contrib for more exporters/receivers
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel-collector/otel-collector-config.yml:/etc/otel-collector-config.yml:ro
    ports:
      - "4317:4317"        # OTLP gRPC receiver
      - "4318:4318"        # OTLP HTTP receiver
      - "13133:13133"      # Health Check extension
      - "55679:55679"      # zPages extension
      - "8888:8888"        # Prometheus exporter for its own metrics
      - "8889:8889"        # Prometheus exporter for app metrics (if configured)
    networks:
      - observability-net
    depends_on:
      - jaeger
      - loki
      - prometheus

  # --------------------------------------------------------------------
  # Prometheus - Metrics Storage & Alerting
  # --------------------------------------------------------------------
  prometheus:
    image: prom/prometheus:v2.51.2
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle' # Allows hot reloads via HTTP POST to /-/reload
    ports:
      - "9090:9090"
    networks:
      - observability-net
    restart: unless-stopped

  # --------------------------------------------------------------------
  # Loki - Log Aggregation
  # --------------------------------------------------------------------
  loki:
    image: grafana/loki:2.9.8
    container_name: loki
    volumes:
      - ./loki/loki-config.yml:/etc/loki/config.yml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/config.yml
    ports:
      - "3100:3100" # Loki API port
    networks:
      - observability-net
    restart: unless-stopped

  # --------------------------------------------------------------------
  # Jaeger - Distributed Tracing (All-in-one for simplicity)
  # --------------------------------------------------------------------
  jaeger:
    image: jaegertracing/all-in-one:1.57
    container_name: jaeger
    ports:
      - "5775:5775/udp"    # Agent - zipkin.thrift
      - "6831:6831/udp"    # Agent - jaeger.thrift compact
      - "6832:6832/udp"    # Agent - jaeger.thrift binary
      - "5778:5778"        # Agent - config server
      - "16686:16686"      # Jaeger UI / Query Port
      - "14268:14268"      # Collector - jaeger.thrift HTTP
      - "14250:14250"      # Collector - jaeger.thrift gRPC (if using gRPC exporter)
      # - "9411:9411"      # Collector - Zipkin compatible
    environment:
      - COLLECTOR_OTLP_ENABLED=true # Enable OTLP receiver in Jaeger
    networks:
      - observability-net
    restart: unless-stopped

  # --------------------------------------------------------------------
  # Grafana - Visualization
  # --------------------------------------------------------------------
  grafana:
    image: grafana/grafana:10.4.2
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin # Change this in production!
      - GF_USERS_ALLOW_SIGN_UP=false
      # - GF_LOG_LEVEL=debug # Uncomment for more logs
    ports:
      - "3000:3000"
    networks:
      - observability-net
    restart: unless-stopped
    depends_on:
      - prometheus
      - loki
      - jaeger

# Note: Sentry services have been temporarily removed due to ARM64 compatibility issues
# If you need error tracking, consider using the hosted Sentry service or
# follow the official self-hosted guide at https://github.com/getsentry/self-hosted